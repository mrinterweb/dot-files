" SUPER IMPORTANT: this relies on Vundle being installed. Let me explain...
" All dependencies are managed with Vundle as you can see lines below starting
" with "Plug *"

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'vim-scripts/tComment'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rbenv'
Plug 'vim-ruby/vim-ruby'

" Plug 'junegunn/fzf', { 'do': './install --bin' }
" Plug 'junegunn/fzf.vim'
" let $FZF_DEFAULT_COMMAND = 'rg --files --ignore-vcs --threads=1'
" nnoremap <c-p> :FZF<cr>
" Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Plug 'mrinterweb/vim-visual-surround.git'
Plug 'SirVer/UltiSnips'
Plug 'honza/vim-snippets'

Plug 'cakebaker/scss-syntax.vim'
Plug 'danro/rename.vim'
Plug 'elixir-lang/vim-elixir'
Plug 'heavenshell/vim-jsdoc'
Plug 'junegunn/vim-easy-align'
Plug 'majutsushi/tagbar'
Plug 'maksimr/vim-jsbeautify'
Plug 'pangloss/vim-javascript'
Plug 'posva/vim-vue'
Plug 'rhysd/vim-crystal'
Plug 'scrooloose/nerdcommenter'
Plug 'slim-template/vim-slim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'dense-analysis/ale'
Plug 'kchmck/vim-coffee-script'
" Plug 'tbodt/deoplete-tabnine', { 'do': './install.sh' }

Plug 'jreybert/vimagit'
Plug 'Yggdroot/indentLine'
Plug 'janko/vim-test'
Plug 'tpope/vim-dispatch'
Plug 'Valloric/ListToggle'
Plug 'mattn/emmet-vim'
Plug 'itchyny/lightline.vim'
Plug 'elzr/vim-json'

" --- Colors --- START
Plug 'flazz/vim-colorschemes'
Plug 'lifepillar/vim-solarized8'
Plug 'bluz71/vim-moonfly-colors'
Plug 'danilo-augusto/vim-afterglow'
Plug 'nightsense/seabird'
Plug 'tomasiser/vim-code-dark'
" --- Colors --- END

if has('nvim')
  " Plug 'ncm2/float-preview.nvim'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  " Plug 'rmagatti/auto-session'
else
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

if has('nvim')
  " vim-test setup
  let test#strategy = {
    \ 'nearest': 'neovim',
    \ 'file':    'neovim',
    \ 'suite':   'dispatch_background',
  \}

  set termguicolors
endif

call plug#end()

filetype plugin indent on     " required!

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Turn off visual bell sound
set noeb vb t_vb=

set nobackup
set nowritebackup
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set linespace=2
set nobackup
set noswapfile
set nohlsearch " Turns off search highlighting
set number

nnoremap <F4> :set hlsearch!<CR>
nnoremap <F6> :set spell! spelllang=en_us<CR>

" http://stackoverflow.com/questions/8597247/text-in-gvim-disappearing
set guioptions=agim
" set synmaxcol=150

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
  set hlsearch
endif

" Switch wrap off for everything
set nowrap

set noerrorbells visualbell t_vb=
set novisualbell

set sessionoptions=curdir,tabpages,winsize,winpos

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  autocmd! GUIEnter * set visualbell t_vb=
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Set File type to 'text' for files ending in .txt
  autocmd BufNewFile,BufRead *.txt setfiletype text

  " Enable soft-wrapping for text files
  autocmd FileType text,markdown,html,xhtml,eruby setlocal wrap linebreak nolist

  " Check for file change to see if buffer needs reloading https://stackoverflow.com/questions/923737/detect-file-change-offer-to-reload-file/927634#927634
  autocmd CursorHold * checktime

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  " autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Automatically load .vimrc source when saved
  autocmd BufWritePost .vimrc source $MYVIMRC
  autocmd BufWritePre * %s/\s\+$//e
  autocmd FileType vue syntax sync fromstart

  augroup END
else
  set autoindent		" always set autoindenting on
endif " has("autocmd")

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set expandtab

" Always display the status line
set laststatus=2

" space is the leader character
let mapleader = " "

nnoremap <Leader>r :tabdo set relativenumber!<CR>
xnoremap <Leader>c "*y<Esc>
" Fugative shortcuts
map <Leader>gs :Gstatus<CR>

" Hide search highlighting
map <Leader>h :set invhls <CR>

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>] :tabnext<CR>
map <Leader>[ :tabprevious<CR>

" vim-test

" these "Ctrl mappings" work well when Caps Lock is mapped to Ctrl
nmap <silent> t<C-n> :w<CR>:TestNearest<CR>
nmap <silent> t<C-f> :w<CR>:TestFile<CR>
nmap <silent> t<C-l> :w<CR>:TestLast<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-g> :TestVisit<CR>
nmap <silent> tb<C-n> :w<CR>:TestNearest -strategy=dispatch_background<CR>
nmap <silent> tb<C-f> :w<CR>:TestFile -strategy=dispatch_background<CR>
nmap <silent> tb<C-l> :w<CR>:TestLast -strategy=dispatch_background<CR>
nmap <silent> r<C-f> :!rubocop -A %<CR>

" function! DockerTransform(cmd) abort
"   return './bin/docker-proxy -v '.a:cmd
" endfunction

" let g:test#custom_transformations = {'docker': function('DockerTransform')}
" let g:test#transformation = 'docker'

let g:test#ruby#rspec#executable = 'zeus rspec --fail-fast=3'

" let g:test#ruby#rspec#executable = $HOME.'/.rbenv/shims/bundle exec spring rspec'

let g:test#ruby#rspec#options = {
  \ 'nearest': '--format documentation',
  \ 'file':    '--format documentation',
\}

noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" let $PATH .= $HOME.'/.asdf/shims'
let $PATH=$HOME.'/.asdf/shims:'.$PATH

vmap D y'>p

" Press Shift+P while in visual mode to replace the selection without
" overwriting the default register
vmap P p :call setreg('"', getreg('0')) <CR>

" For Haml
au! BufRead,BufNewFile *.haml         setfiletype haml

" No Help, please
nmap <F1> <Esc>

inoremap jj <Esc>
inoremap jk <Esc>
inoremap kj <Esc>
inoremap kk <Esc>:w<CR>

" Local config
if filereadable(".vimrc.local")
  source .vimrc.local
endif

" Ripgrep http://blog.burntsushi.net/ripgrep/
if executable('rg')
  set grepprg=rg\ --no-heading\ --vimgrep\ --sort\ path
  set grepformat=%f:%l:%c:%m

  let g:ackprg = 'rg --vimgrep --no-heading -t1'

  " Use rg in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'rg -l --sort-files --color=never --files %s'

  " rg is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
  let g:ctrlp_working_path_mode = 'ra'
  let g:ctrlp_switch_buffer = 'et'
else
  set grepprg=git\ grep\ -n
endif

" Color scheme
" colorscheme molokai
" colorscheme desert
" Other favorites: flatland, hybrid, jellybeans, Tommorow-Night, codeschool
" http://cocopon.me/app/vim-color-gallery/
" set background=dark
" colorscheme solarized
" colorscheme solarized8_flat
" colorscheme codedark
colorscheme afterglow
" colorscheme gruvbox
" let g:gruvbox_contrast_dark = "dark"
" colorscheme flatlandia

let g:solarized_termcolors=256
" let g:solarized_contras="high"
let g:solarized_bold=1
let g:mustache_abbreviations=1

" For some reason powerline fancy font stuff isn't working
let g:Powerline_symbols = 'fancy'

" The following is a good way of setting fonts based on availability
let os = substitute(system('uname'), "\n", "", "")
if os == "Darwin" && !has("gui_vimr")
  set guifont=Hack-Regular:h16
elseif os == "Linux"
  silent! set guifont=DejaVu\ Sans\ Mono\ 14
endif

let g:multi_cursor_prev_key='<C-N>'
" Numbers
" set number
set relativenumber " used for showing relative line number
set nocursorline
set lazyredraw
set numberwidth=4
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

" case only matters with mixed case expressions
set ignorecase
set smartcase

" Tags
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"
set tags=./tags;
set tags+=gems.tags

let g:fuf_splitPathMatching=1

set splitbelow
set splitright

" Folds
set foldmethod=indent
set foldlevel=99

" Custom alias
command! Closeall :bufdo bdelete

noremap <silent><C-S-PageUp> gT
noremap <silent><C-S-PageDown> gt
noremap <silent><Right> gt
noremap <silent><Left> gT

if has("gui_vimr")
  nnoremap <silent><D-S-{> gT
  nnoremap <silent><D-S-}> gt
endif

" map <Leader>w :call OpenURL()<CR>
map <Leader>n :NERDTreeToggle<CR>
map <Leader>b :NERDTreeFind<CR>
" map <Leader>t :CommandT<CR>
map <Leader>mt :tabnew<CR>
map <Leader>tt :tabnew<CR>
map <Leader>tn :tabnext<CR>
map <Leader>tp :tabprevious<CR>

" let g:ctrlp_custom_ignore = {
"       \ 'dir': '\v\/(vendor|tmp|public|log|bin|bower_components|node_modules)'
"       \ }

if filereadable('/usr/local/bin/python')
  let g:python2_host_prog = '/usr/local/bin/python'
elseif filereadable('/usr/bin/python')
  let g:python2_host_prog = '/usr/bin/python'
else
  echo "No python2 found"
endif

if filereadable('/usr/local/bin/python3')
  let g:python3_host_prog = '/usr/local/bin/python3'
elseif filereadable('/usr/bin/python3')
  let g:python3_host_prog = '/usr/bin/python3'
else
  echo "No python3 found"
endif

" UltiSnips triggering
let g:UltiSnipsExpandTrigger='<C-e>'
let g:UltiSnipsSnippetsDir=$HOME.'/.vim/UltiSnips'
let g:UltiSnipsEditSplit='vertical'

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
"
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Vue syntax commenting
let g:ft = ''
function! NERDCommenter_before()
  if &ft == 'vue'
    let g:ft = 'vue'
    let stack = synstack(line('.'), col('.'))
    if len(stack) > 0
      let syn = synIDattr((stack)[0], 'name')
      if len(syn) > 0
        exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
      endif
    endif
  endif
endfunction
function! NERDCommenter_after()
  if g:ft == 'vue'
    setf vue
    let g:ft = ''
  endif
endfunction

function! SaveSession()
  let last_session_path = '~/.vim/last_session.vim'
  if !empty(glob(last_session_path))
    execute "mksession! " . last_session_path
    echomsg "Session saved to: " . last_session_path
  else
    echoerr "session path not readable: " . last_session_path
    execute "!touch " . last_session_path
    echomsg "File should be created now. Try running this again"
  endif
endfunction

function! LoadSession()
  let last_session_path = '~/.vim/last_session.vim'
  if !empty(glob(last_session_path))
    execute "source " . last_session_path
    echomsg "Session loaded from: " . last_session_path
  else
    echoerr "session path not readable: " . last_session_path
  endif
endfunction

let g:indentLine_color_gui = '#3F3F3F'
let g:indentLine_char = '┆'


" uses floating window for auto-complete docs
let g:float_preview#docked = 1

" ----- Ale --- START
" let g:ale_linters = {
" \   'elixir': ['elixir-ls', 'credo'],
" \   'ruby': ['rubocop'],
" \   'rust': ['rustc', 'rls'],
" \}
" let g:ale_fixers = {
" \   '*': ['remove_trailing_lines', 'trim_whitespace'],
" \   'elixir': ['mix_format'],
" \   'rust': ['rustfmt'],
" \}
"
" " Elixir-ls needs to be downloaded and compiled from source.
" " This worked last time:
" " mkdir ~/source && cd ~/source && git clone git clone https://github.com/JakeBecker/elixir-ls.git && cd elixir-ls
" " mix deps.get && mix compile && mix elixir_ls.release -o release
" let g:ale_elixir_elixir_ls_release=$HOME.'/source/elixir-ls/release'
" let g:ale_elixir_credo_strict = 1
" let g:ale_linters_explicit = 1
" let g:ale_fix_on_save = 1
" let g:ale_lint_on_save = 1
" let g:ale_sign_error = '✘'
" let g:ale_sign_warning = '⚠'
" let g:ale_lint_on_enter = 0
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_rust_rustc_options = '--emit metadata'
" highlight ALEErrorSign ctermbg=NONE ctermfg=red
" highlight ALEWarningSign ctermbg=NONE ctermfg=yellow
" nmap <silent> <Leader>ad :ALEGoToDefinition<CR>
" nmap <silent> <Leader>adv :ALEGoToDefinitionInVSplit<CR>
" nmap <silent> <Leader>ads :ALEGoToDefinitionInSplit<CR>
" nmap <silent> <Leader>ah :ALEHover<CR>
" nmap <silent> <Leader>ar :ALEFindReferences<CR>
" ----- Ale --- END

" Use FZF Files for fuzzy search
" fzf file fuzzy search that respects .gitignore
" If in git directory, show only files that are committed, staged, or unstaged
" else use regular :Files
nnoremap <expr> <C-p> (len(system('git rev-parse')) ? ':Files' : ':GFiles --exclude-standard --others --cached')."\<cr>"
nnoremap <Leader>; :Windows<cr>
nnoremap <c-g> :Rg<cr>
nnoremap <Leader>gf :Lines<cr>

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
nnoremap <Leader>gp :RG<cr>

" ----- vim-easy-algin --- START
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" ----- vim-easy-algin --- END

" ----- vim-json --- START
let g:vim_json_syntax_conceal = 0
" ----- vim-json --- END

" ----- vim-clap --- START

" nnoremap <c-p> :Clap files<cr>
" nnoremap <Leader>/ :Clap blines<cr>
" nnoremap <Leader>com :Clap commits<cr>
" nnoremap <Leader>cg :Clap grep<cr>
" ----- vim-clap --- END

" ----- CoC --- START
" Do not automatically show autocomplete
let b:coc_suggest_disable = 1

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" ----- CoC --- END

" ----- CoC Customizations --- START
if isdirectory('Gemfile')
  let g:coc_global_extensions += ['coc-solargraph']
endif

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" ----- CoC Customizations --- END

let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified', 'cocstatus', 'coccurrentfunction'  ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'filetype' ] ]
      \ },
      \ 'component': {
      \   'cocstatus': '%{coc#status()}',
      \   'coccurrentfunction': "%{get(b:, \'coc_current_function\', '')}"
      \ },
      \ }
