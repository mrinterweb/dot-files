" SUPER IMPORTANT: this relies on Vundle being installed. Let me explain...
" All dependencies are managed with Vundle as you can see lines below starting
" with "Bundle *"
" https://github.com/gmarik/Vundle.vim
" To install Vundle:
" mkdir -p ~/.vim/bundle
" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" Then when you launch vim, run command "BundleInstall"
" That's all. No more configuration should be needed.

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

" set rtp+=~/.vim/vundle.git/
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'scrooloose/nerdtree'
Bundle 'Lokaltog/vim-powerline'
Bundle 'altercation/vim-colors-solarized'
Bundle 'Tabular'
Bundle 'tpope/vim-fugitive'
Bundle 'vim-scripts/tComment'
Bundle 'kchmck/vim-coffee-script'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-rails.git'
" Bundle 'mrinterweb/vim-visual-surround.git'
Bundle 'kien/ctrlp.vim.git'
" Bundle 'Valloric/YouCompleteMe'
Bundle 'Shougo/neocomplcache'
Bundle 'vim-scripts/UltiSnips'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'mustache/vim-mustache-handlebars'
Bundle 'scrooloose/syntastic'
Bundle 'dsawardekar/portkey'
Bundle 'dsawardekar/ember.vim'
Bundle 'mattn/emmet-vim'
Bundle 'danro/rename.vim'
Bundle 'Slava/vim-colors-tomorrow'
" Bundle 'xolox/vim-reload'
" Bundle 'heartsentwined/vim-emblem'

filetype plugin indent on     " required!

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set nobackup 
set nowritebackup
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set linespace=2
set nobackup
set noswapfile
set nohlsearch " Turns off search highlighting

nnoremap <F3> :set relativenumber!<CR>
nnoremap <F4> :set hlsearch!<CR>
" Pretty sure <F5> is reserved for Ctrl-P plugin
nnoremap <F6> :set spell! spelllang=en_us<CR>

" http://stackoverflow.com/questions/8597247/text-in-gvim-disappearing
set guioptions=agim

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
  set hlsearch
endif

" Switch wrap off for everything
set nowrap

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Set File type to 'text' for files ending in .txt
  autocmd BufNewFile,BufRead *.txt setfiletype text
  autocmd BufRead *.rabl setfiletype ruby 

  " Enable soft-wrapping for text files
  autocmd FileType text,markdown,html,xhtml,eruby setlocal wrap linebreak nolist

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  " autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Automatically load .vimrc source when saved
  autocmd BufWritePost .vimrc source $MYVIMRC

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" if has("folding")
  " set foldenable
  " set foldmethod=syntax
  " set foldlevel=1
  " set foldnestmax=2
  " set foldtext=strpart(getline(v:foldstart),0,50).'\ ...\ '.substitute(getline(v:foldend),'^[\ #]*','','g').'\ '
" endif

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set expandtab

" Always display the status line
set laststatus=2

" \ is the leader character
let mapleader = ","

" Edit the README_FOR_APP (makes :R commands work)
map <Leader>R :e doc/README_FOR_APP<CR>

" Leader shortcuts for Rails commands
map <Leader>m :Rmodel 
map <Leader>c :Rcontroller 
map <Leader>v :Rview 
map <Leader>u :Runittest 
map <Leader>f :Rfunctionaltest 
map <Leader>tm :RTmodel 
map <Leader>tc :RTcontroller 
map <Leader>tv :RTview 
map <Leader>tu :RTunittest 
map <Leader>tf :RTfunctionaltest 
map <Leader>sm :RSmodel 
map <Leader>sc :RScontroller 
map <Leader>sv :RSview 
map <Leader>su :RSunittest 
map <Leader>sf :RSfunctionaltest 

" Hide search highlighting
map <Leader>h :set invhls <CR>

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Duplicate a selection
" Visual mode: D
vmap D y'>p

" Press Shift+P while in visual mode to replace the selection without
" overwriting the default register
vmap P p :call setreg('"', getreg('0')) <CR>

" For Haml
au! BufRead,BufNewFile *.haml         setfiletype haml

" No Help, please
nmap <F1> <Esc>


inoremap jj <Esc>
inoremap jk <Esc>
inoremap kk <Esc>:w<CR>

" Cool tab completion stuff
set wildmenu
set wildmode=list:longest,full

" Display extra whitespace
" set list listchars=tab:»·,trail:·

" Edit routes
command! Rroutes :e config/routes.rb
command! Rschema :e db/schema.rb

" Local config
if filereadable(".vimrc.local")
  source .vimrc.local
endif

" Use Ack instead of Grep when available
if executable("ack-grep")
  " set grepprg=ack-grep -H --nogroup --nocolor --ignore-dir=tmp --ignore-dir=coverage
endif
set grepprg=git\ grep\ -n

" Color scheme
" colorscheme railscasts 
" colorscheme molokai
" colorscheme desert
set background=dark
" colorscheme solarized
colorscheme tomorrow
" highlight NonText guibg=#060606
" highlight Folded  guibg=#0A0A0A guifg=#9090D0

let g:solarized_termcolors=256
let g:solarized_contras="high"
let g:solarized_bold=1
" For some reason powerline fancy font stuff isn't working
" let g:Powerline_symbols = 'fancy'

" The following is a good way of setting fonts based on availability
silent! set guifont=DejaVu\ Sans\ Mono\ 10
if &guifont != 'DejaVu Sans Mono 10'
  set guifont=Andale\ Mono:h13
endif

" Numbers
" set number
set relativenumber " used for showing relative line number
set numberwidth=4
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

" Snippets are activated by Shift+Tab
let g:snippetsEmu_key = "<S-Tab>"

" Tab completion options
" (only complete to the longest unambiguous match, and show a menu)
set completeopt=longest,menu
set wildmode=list:longest,list:full
set complete=.,t

" case only matters with mixed case expressions
set ignorecase
set smartcase

" Tags
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"
set tags=./tags;
set tags+=gems.tags

let g:fuf_splitPathMatching=1

" Custom alias
command! Closeall :bufdo bdelete

function! TabLeft()
   let tab_number = tabpagenr() - 1
   if tab_number == 0
      execute "tabm" tabpagenr('$') - 1
   else
      execute "tabm" tab_number - 1
   endif
endfunction

function! TabRight()
   let tab_number = tabpagenr() - 1
   let last_tab_number = tabpagenr('$') - 1
   if tab_number == last_tab_number
      execute "tabm" 0
   else
      execute "tabm" tab_number + 1
   endif
endfunction

map <silent><C-S-PageUp> :execute TabRight()<CR>
map <silent><C-S-PageDown> :execute TabLeft()<CR>

" map <Leader>w :call OpenURL()<CR>
map <Leader>n :NERDTreeToggle<CR>
" map <Leader>t :CommandT<CR>
map <Leader>mt :tabnew<CR>

" Map some standard cut copy paste keys
vnoremap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

if exists(":Tabularize")
  vmap <Leader>a, :Tabularize /,\zs<CR>
  vmap <Leader>a> :Tabularize /=><CR>
  vmap <Leader>a :Tabularize /\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

""" ----- Neocachecomplete -- START
" " Disable AutoComplPop.
" let g:acp_enableAtStartup = 0
" let g:neocomplcache_enable_at_startup = 1
" " Use smartcase.
" let g:neocomplcache_enable_smart_case = 1
" " Use camel case completion.
" let g:neocomplcache_enable_camel_case_completion = 1
" " Use underscore completion.
" let g:neocomplcache_enable_underbar_completion = 1
" let g:neocomplcache_manual_completion_start_length = 1
" 
" let g:neocomplcache_auto_completion_start_length = 5
" let g:neocomplcache_enable_fuzzy_completion = 1
" let g:neocomplcache_fuzzy_completion_start_length = 3

""" ----- Neocachecomplete -- END

