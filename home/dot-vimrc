" SUPER IMPORTANT: this relies on Vundle being installed. Let me explain...
" All dependencies are managed with Vundle as you can see lines below starting
" with "Plug *"

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'vim-scripts/tComment'
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'

Plug '/usr/local/opt/fzf'
nnoremap <c-p> :FZF<cr>

" Plug 'mrinterweb/vim-visual-surround.git'
Plug 'SirVer/UltiSnips'
Plug 'cakebaker/scss-syntax.vim'
Plug 'danro/rename.vim'
Plug 'elixir-lang/vim-elixir'
Plug 'flazz/vim-colorschemes'
Plug 'heavenshell/vim-jsdoc'
Plug 'honza/vim-snippets'
Plug 'junegunn/vim-easy-align'
Plug 'majutsushi/tagbar'
Plug 'maksimr/vim-jsbeautify'
Plug 'pangloss/vim-javascript'
Plug 'posva/vim-vue'
Plug 'rhysd/vim-crystal'
Plug 'scrooloose/nerdcommenter'
Plug 'skalnik/vim-vroom'
Plug 'slim-template/vim-slim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-endwise'
Plug 'w0rp/ale'

" --- Colors --- START
Plug 'altercation/vim-colors-solarized'
Plug 'bluz71/vim-moonfly-colors'
Plug 'danilo-augusto/vim-afterglow'
Plug 'nightsense/seabird'
Plug 'tomasiser/vim-code-dark'
" --- Colors --- END

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

call plug#end()

filetype plugin indent on     " required!

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Turn off visual bell sound
set noeb vb t_vb=

set nobackup
set nowritebackup
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set linespace=2
set nobackup
set noswapfile
set nohlsearch " Turns off search highlighting
set number

nnoremap <F3> :set relativenumber!<CR>
nnoremap <F4> :set hlsearch!<CR>
" Pretty sure <F5> is reserved for Ctrl-P plugin
nnoremap <F6> :set spell! spelllang=en_us<CR>

" http://stackoverflow.com/questions/8597247/text-in-gvim-disappearing
set guioptions=agim
" set synmaxcol=150

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
  set hlsearch
endif

" Switch wrap off for everything
set nowrap

set noerrorbells visualbell t_vb=
set novisualbell

set sessionoptions=curdir,tabpages,winsize,winpos

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  autocmd! GUIEnter * set visualbell t_vb=
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Set File type to 'text' for files ending in .txt
  autocmd BufNewFile,BufRead *.txt setfiletype text
  autocmd BufRead *.rabl setfiletype ruby

  " Enable soft-wrapping for text files
  autocmd FileType text,markdown,html,xhtml,eruby setlocal wrap linebreak nolist

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  " autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Automatically load .vimrc source when saved
  autocmd BufWritePost .vimrc source $MYVIMRC
  autocmd BufWritePre * %s/\s\+$//e
  autocmd FileType vue syntax sync fromstart
  augroup END
else
  set autoindent		" always set autoindenting on
endif " has("autocmd")

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set expandtab

" Always display the status line
set laststatus=2

" \ is the leader character
let mapleader = ","

" Fugative shortcuts
map <Leader>gs :Gstatus<CR>

" Hide search highlighting
map <Leader>h :set invhls <CR>

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

nnoremap <leader>. :CtrlPTag<cr>

noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

vmap D y'>p

" Press Shift+P while in visual mode to replace the selection without
" overwriting the default register
vmap P p :call setreg('"', getreg('0')) <CR>

" For Haml
au! BufRead,BufNewFile *.haml         setfiletype haml

" No Help, please
nmap <F1> <Esc>

inoremap jj <Esc>
inoremap jk <Esc>
inoremap kj <Esc>
inoremap kk <Esc>:w<CR>

" Cool tab completion stuff
set wildmenu
set wildmode=list:longest,full

" Local config
if filereadable(".vimrc.local")
  source .vimrc.local
endif

" Ripgrep http://blog.burntsushi.net/ripgrep/
if executable('rg')
  set grepprg=rg\ --no-heading\ --vimgrep
  set grepformat=%f:%l:%c:%m

  let g:ackprg = 'rg --vimgrep --no-heading -t1'

  " Use rg in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'rg -l --sort-files --color=never --files %s'

  " rg is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
  let g:ctrlp_working_path_mode = 'ra'
  let g:ctrlp_switch_buffer = 'et'
else
  set grepprg=git\ grep\ -n
endif

" Color scheme
" colorscheme molokai
" colorscheme desert
" Other favorites: flatland, hybrid, jellybeans, Tommorow-Night, codeschool
" http://cocopon.me/app/vim-color-gallery/
set background=dark
" colorscheme solarized
" colorscheme codedark
colorscheme afterglow
" highlight NonText guibg=#060606
" highlight Folded  guibg=#0A0A0A guifg=#9090D0

let g:solarized_termcolors=256
let g:solarized_contras="high"
let g:solarized_bold=1
let g:mustache_abbreviations=1

" For some reason powerline fancy font stuff isn't working
let g:Powerline_symbols = 'fancy'

" The following is a good way of setting fonts based on availability
let os = substitute(system('uname'), "\n", "", "")
if os == "Darwin" && !has("gui_vimr")
  set guifont=Monaco:h15
elseif os == "Linux"
  silent! set guifont=DejaVu\ Sans\ Mono\ 14
endif

let g:multi_cursor_prev_key='<C-N>'
" Numbers
" set number
set relativenumber " used for showing relative line number
set nocursorline
set lazyredraw
set numberwidth=4
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

" Snippets are activated by Shift+Tab
let g:snippetsEmu_key = "<S-Tab>"

" Tab completion options
" (only complete to the longest unambiguous match, and show a menu)
set completeopt=longest,menu
set wildmode=list:longest,list:full
set complete=.,t

" case only matters with mixed case expressions
set ignorecase
set smartcase

" Tags
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"
set tags=./tags;
set tags+=gems.tags

let g:fuf_splitPathMatching=1

set splitbelow
set splitright

" Custom alias
command! Closeall :bufdo bdelete

noremap <silent><C-S-PageUp> gT
noremap <silent><C-S-PageDown> gt
noremap <silent><Right> gt
noremap <silent><Left> gT

if has("gui_vimr")
  nnoremap <silent><D-S-{> gT
  nnoremap <silent><D-S-}> gt
endif

" map <Leader>w :call OpenURL()<CR>
map <Leader>n :NERDTreeToggle<CR>
" map <Leader>t :CommandT<CR>
map <Leader>mt :tabnew<CR>

" let g:ctrlp_custom_ignore = {
"       \ 'dir': '\v\/(vendor|tmp|public|log|bin|bower_components|node_modules)'
"       \ }

" Vroom -- start
let g:vroom_use_spring = 1
let g:vroom_use_terminal = 1
let g:vroom_use_colors = 1
let g:vroom_binstubs_path = 1
" Vroom -- end

if filereadable('/usr/local/bin/python')
  let g:python2_host_prog = '/usr/local/bin/python'
elseif filereadable('/usr/bin/python')
  let g:python2_host_prog = '/usr/bin/python'
else
  echo "No python2 found"
endif

if filereadable('/usr/local/bin/python3')
  let g:python3_host_prog = '/usr/local/bin/python3'
else
  echo "No python3 found"
endif

" UltiSnips triggering
let g:UltiSnipsExpandTrigger='<C-e>'

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
"
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

let g:deoplete#enable_at_startup = 1
let g:deoplete#disable_auto_complete = 1
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : deoplete#mappings#manual_complete()
